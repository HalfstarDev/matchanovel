local matchanovel = require "matchanovel.matchanovel"
local save = require "matchanovel.save"
local colors = require "matchanovel.colors"
local images = require "matchanovel.defold_gui.images"



local display_width = tonumber(sys.get_config_int("display.width", 960))
local display_height = tonumber(sys.get_config_int("display.height", 520))

local v3 = vmath.vector3

local sprites = {}
local stencils = {}
local loaded_textures = {}
local auto_order = {}
local moving = {}

local debug_mode = false
local debug_id = false


local nodes = {}



function does_node_exist(node)
	return pcall(function(node) gui.get_position(node) end, node) == true
end

local function get_key(val, tab)
	for k, v in pairs(tab) do
		if val == v then 
			return k
		end
	end
end

local function get_screen_position(v)
	local gui_scale = gui.get_scale(gui.get_node("gui"))
	--local gui_scale = vmath.vector3(1, 1, 1)
	local pos_x = (v.x - 0.5) * display_width  / gui_scale.x
	local pos_y =  v.y        * display_height / gui_scale.y
	return v3(pos_x, pos_y, 0)
end

local function get_property(id, property)
	return save.get_var(id.."."..property)
end

local function get_position_from_variable(var)
	local x = save.get_var(var..".x") or 0.5
	local y = save.get_var(var..".y") or 0
	return v3(x, y, 0)
end



local function set_sprite(name, spr)
	if not sprites[name] then return end
	local node = sprites[name].node
	if node and spr then 
		local first = string.sub(spr, 1, 1)
		local filepath
		if first == "/" or first == "." then
			filepath = spr
		else
			local has_dot = string.find(spr, "%.")
			if has_dot then
				filepath = "/assets/images/sprites/"..spr
			else
				filepath = "/assets/images/sprites/"..name.."_"..spr..".png"
			end
		end
		images.set_gui_sprite(loaded_textures, node, filepath)
	end
end

local function get_scale(name)
	-- global scale factor of all sprites 
	local scale_sprites = save.get_var("sprites.scale") or 1

	-- base scale of this individual sprite
	local scale_sprite = save.get_var(name..".scale") or 1

	-- local scale of position of sprite
	local scale_at = 1
	local at = save.get_var(name..".at")
	if at then
		scale_at = save.get_var(at..".scale") or 1
	end

	-- scale vector
	local scale = scale_sprites * scale_sprite * scale_at
	local v_scale = v3(scale, scale, 1)

	-- flip sprite horizontally and vertically
	local flip_x = save.get_var(name..".flip_x")
	local flip_y = save.get_var(name..".flip_y")
	if flip_x then
		v_scale.x = -v_scale.x
	end
	if flip_y then
		v_scale.y = -v_scale.y
	end
	return v_scale
end

local function update_flip(name, duration)
	if not sprites[name] then return end
	local node = sprites[name].node
	if node then
		local scale = get_scale(name)
		duration = duration or save.get_var("flip.duration") or 0.5
		gui.animate(node, "scale", scale, gui.EASING_INOUTSINE, duration)
	end
end

local function flip(name, duration)
	local id = name..".flip_x"
	local flip_x = save.get_var(id)
	save.set_var(id, not flip_x)
	update_flip(name, duration)
end

local function get_character_delta_position(name)
	local x = save.get_var(name..".x") or 0
	local y = save.get_var(name..".y") or 0
	return v3(x, y, 0)
end

local function get_auto_width(n)
	local id_width = "sprites.auto_"..n..".width"
	local width = save.get_var(id_width)
	if width then
		return width
	elseif n > 1 then
		return get_auto_width(n - 1)
	else
		return false
	end
end

local function get_auto_from_position(i, n)
	n = n or #auto_order
	local id_position = "sprites.auto_"..n.."_"..i
	local id_width = "sprites.auto_"..n..".width"
	local width = get_auto_width(n)
	local variable_position = get_position_from_variable(id_position)
	local auto_pos = v3()
	local auto_scale = save.get_var(id_position..".scale")

	if width and n > 1 then
		auto_pos.x = (1 - width) / 2 + width * ((i - 1) / (n - 1))
	else
		auto_pos.x = variable_position.x
	end
	
	auto_pos.y = variable_position.y

	
	return auto_pos, auto_scale
end

local function get_auto_from_id(id)
	if not sprites[id] then return end
	local n_auto = save.get_var(id..".n_auto")
	if not n_auto then
		local at = save.get_var(id..".at")
		if at then
			n_auto = tonumber(at)
		end 
	end
	if n_auto then
		return get_auto_from_position(n_auto)
	else
		return false, false
	end
end

local function order_table(t)
	local max = 1
	for k, v in pairs(t) do
		local number = tonumber(k)
		if number then
			max = math.max(max, number)
		end
	end
	local ordered = {}
	for i = 1, max do
		local value = t[i]
		if value then
			table.insert(ordered, value)
		end
	end
	return ordered
end

local function update_auto(duration)
	auto_order = order_table(auto_order) or auto_order
	local auto_duration = duration or save.get_var("sprites.auto.duration") or 1
	local auto_easing_id = string.upper(save.get_var("sprites.auto.easing") or "INOUTSINE")
	local easing = gui["EASING_"..auto_easing_id] or gui.EASING_INOUTSINE
	for k, id in pairs(auto_order) do
		if sprites[id] then
			local spr = sprites[id]
			local node = spr.node
			duration = spr.auto_duration or auto_duration
			if spr.auto_duration then
				spr.auto_duration = nil
			end
			local auto_pos, auto_scale = get_auto_from_id(id)
			if auto_pos then 
				moving[id] = true
				local position = get_screen_position(spr.character_pos + auto_pos)
				gui.animate(node, "position", position, easing, duration, 0, moving_done)
			end
			if auto_scale then
				local v_scale = v3(auto_scale or 1, auto_scale or 1, 1)
				gui.animate(node, "scale", v_scale, easing, duration)
			end
			save.set_var(id..".at", k)
		end
	end
end

local function reorder_auto()
	for k, v in pairs(auto_order) do
		sprites[v].auto = k
		save.set_var(v..".n_auto", k)
	end
end


local function add_auto(id, pos)
	pos = tonumber(pos)
	if pos then
		table.insert(auto_order, pos, id)
		reorder_auto()
	end
end

local function remove_auto(id)
	local pos
	for k, v in pairs(auto_order) do
		if v == id then
			pos = k
		end
	end
	if pos then
		table.remove(auto_order, pos)
	end
	save.set_var(id..".n_auto", nil)
	reorder_auto()
end


local function reorder_z()
	local z_order = {}
	for k, v in pairs(sprites) do
		local z = save.get_var(k..".z")
		if z then
			z_order[z] = k
		end
	end
	
	local previous
	for k, v in pairs(z_order) do
		if previous then
			gui.move_above(sprites[v].node, sprites[previous].node)
		end
		previous = v
	end
end

local function move_above(node, above)
	local other_node
	if sprites[above] and sprites[above].node then
		other_node = sprites[above].node
	else
		other_node = gui.get_node(above)
	end
	if above == "front" then
		gui.move_below(node, other_node)
	else
		gui.move_above(node, other_node)
	end
end

local function move_below(node, below)
	local other_node
	if sprites[below] and sprites[below].node then
		other_node = sprites[below].node
	else
		other_node = gui.get_node(below)
	end
	if below == "back" then
		gui.move_above(node, other_node)
	else
		gui.move_below(node, other_node)
	end
end

local function tint_sprite(node, color, duration)
	local v_color = colors.get_color(color)
	if v_color then
		if duration and duration > 0 then
			gui.animate(node, "color.x", v_color.x, gui.EASING_LINEAR, duration)
			gui.animate(node, "color.y", v_color.y, gui.EASING_LINEAR, duration)
			gui.animate(node, "color.z", v_color.z, gui.EASING_LINEAR, duration)
		else
			gui.set_color(node, v_color)
		end
	end
end


local function new(id)
	local spr = {}
	spr.node = gui.clone(gui.get_node("sprite"))
	spr.id = id
	spr.image = save.get_var(id..".sprite")
	spr.character_pos = get_character_delta_position(id)
	spr.at_pos = v3()
	spr.alpha = 1
	spr.stencil = save.get_var(id..".stencil")
	spr.spine_node = save.get_var(id..".spine")
	--spr.stencil_x = 0
	--spr.stencil_y = 0
	return spr
end

local function continue_loop(self, node)
	for k, v in pairs(sprites) do
		if v.node == node then
			local position
			local easing = v.easing or gui.EASING_INOUTSINE
			local duration = v.loop_duration
			local delay = 0
			if v.loop == 1 then
				v.loop = 2
				position = v.loop_2
			elseif v.loop == 2 then
				v.loop = 1
				position = v.loop_1
			end
			gui.animate(node, "position", position, easing, duration, delay, continue_loop)
		end
	end
end

local function moving_done(self, node)
	for name, spr in pairs(sprites) do
		if spr.node == node then
			moving[name] = true
		end
	end
end

local function move(args)
	local name = args.name
	local to = args.to
	local duration = args.duration
	local color = args.color
	local above = args.above
	local below = args.below
	local delay = args.delay or 0
	local easing_id = string.upper(args.easing or "INOUTSINE")
	local easing = gui["EASING_"..easing_id] or gui.EASING_INOUTSINE

	if not sprites[name] then return end
	
	local spr = sprites[name]
	local node = spr.node
	duration = tonumber(duration) or save.get_var("move.duration") or 0.5

	if to then
		local character_pos = get_character_delta_position(name) or v3()
		local to_pos = get_position_from_variable(to) or v3()
		local position = get_screen_position(character_pos + to_pos)
		save.set_var(name..".at", to)
		local v_scale = get_scale(name)

		if node and to_pos then
			gui.animate(node, "position", position, easing, duration, delay, moving_done)
			gui.animate(node, "scale", v_scale, gui.EASING_INOUTSINE, duration, delay)
			moving[name] = true
		end
	else
		local loop_1 = args.loop_1
		local loop_2 = args.loop_2
		if loop_1 and loop_2 then
			local character_pos = get_character_delta_position(name) or v3()
			local position_1 = get_screen_position(get_position_from_variable(loop_1) + character_pos)
			local position_2 = get_screen_position(get_position_from_variable(loop_2) + character_pos)
			spr.loop_1 = position_1
			spr.loop_2 = position_2
			spr.loop_duration = duration
			spr.loop_easing = easing
			spr.loop = 1
			gui.animate(node, "position", position_1, easing, duration, delay, continue_loop)
			moving[name] = true
		end
	end

	if above then
		move_above(node, above)
	end

	if below then
		move_below(node, below)
	end

	if color then
		tint_sprite(node, color, duration)
	end
end

local function show(args)
	local name = args.name
	local at = args.at
	local transition = args.transition
	local duration = args.duration
	local color = args.color
	local above = args.above
	local below = args.below
	local delay = args.delay or 0
	local easing_id = string.upper(args.easing or "INOUTSINE")
	local easing = gui["EASING_"..easing_id] or gui.EASING_INOUTSINE
	
	debug_id = name
	if sprites[name] then
		move(args)
		return
	else
		sprites[name] = new(name)
	end
	local spr = sprites[name]
	local node = spr.node
	local gui_scale = gui.get_scale(gui.get_node("gui")).x
	local use_auto
	local n_auto = save.get_var(name..".n_auto")
	local flip_x = save.get_var(name..".flip_x")
	local at_pos = v3()
	color = color or save.get_var(name..".color")

	if at then
		local is_auto = tonumber(at)
		if is_auto then
			use_auto = true
			n_auto = is_auto
		else
			at_pos = get_position_from_variable(at)
		end
		save.set_var(name..".at", at)
	else
		local at_id = save.get_var(name..".at")
		if at_id then
			local at_id_number = tonumber(at_id)
			if at_id_number then
				n_auto = at_id_number
				use_auto = true
			else
				at_pos = get_position_from_variable(at_id)
			end
		else
			use_auto = true
		end
	end

	if use_auto then
		if n_auto then
			add_auto(spr.id, n_auto)
			spr.auto_duration = duration
		else
			local auto_total = #auto_order + 1
			if not n_auto then
				n_auto = auto_total
			end
			local auto_pos, auto_scale = get_auto_from_position(n_auto, auto_total)
			if auto_pos then
				at_pos = auto_pos
				add_auto(spr.id, n_auto)
				save.set_var(name..".n_auto", n_auto)
				spr.auto_duration = duration
			end
		end
	end
	local position = get_screen_position(spr.character_pos + at_pos)
	
	transition = transition or save.get_var("show.transition")
	duration = duration or save.get_var("show.duration")

	if spr.image then
		local expression = save.get_var(name..".expression")
		local temp_expression_name = save.get_var("_temp_expression_name")
		local temp_expression_sprite = save.get_var("_temp_expression_sprite")
		if temp_expression_sprite and temp_expression_name == name then
			set_sprite(name, temp_expression_sprite)
		elseif expression then
			set_sprite(name, expression)
		else
			set_sprite(name, spr.image)
		end
	end
	
	if spr.spine_node then
		local clone = gui.clone(gui.get_node(spr.spine_node))
		gui.set_enabled(clone, true)
		gui.set_parent(clone, node, false)
		gui.move_below(node, gui.get_node("front"))
	end
	
	if position then 
		gui.set_position(node, position)
		moving[name] = false
	end

	if above then
		move_above(node, above)
	end
	
	if below then
		move_below(node, below)
	end
	
	if not above and not below then
		move_below(node, "front")
	end
	
	local v_scale = get_scale(name)
	if v_scale then
		gui.set_scale(node, v_scale)
	end

	if color then
		tint_sprite(node, color, false)
	end
	
	if transition then
		if transition == "instant" then 
			gui.set_alpha(node, 1)
		elseif transition == "fade" then
			duration = duration or 0.4
			gui.set_alpha(node, 0)
			gui.animate(node, "color.w", 1, easing, duration, delay)
		elseif transition == "move_up" then
			duration = duration or 0.8
			local start_position = v3(x, y - display_height / gui_scale, 0)
			gui.set_position(node, start_position)
			gui.animate(node, "position", position, easing, duration, delay)
			gui.set_alpha(node, 1)
		elseif transition == "grow" then
			duration = duration or 0.6
			gui.set_alpha(node, 1)
			gui.set_scale(node, v3(0.0001, 0.0001, 1))
			gui.animate(node, "scale", v_scale or v3(1, 1, 1), easing, duration, delay)
		end
	else 
		gui.set_alpha(node, 1)
	end

	if spr.stencil and not stencils[name] then
		if spr.stencil == "top" then
			local node_stencil = gui.clone(gui.get_node("stencil_top"))
			stencils[name] = node_stencil
			gui.set_parent(node, stencils[name], true)
			gui.set_size(node_stencil, vmath.vector3(display_width/gui_scale, 0, 0))
			gui.set_position(node, position - vmath.vector3(0, display_height/gui_scale, 0))
		end
	end

	save.state.sprites[name] = true
	--save.state.sprites[name] = spr

	if use_auto then
		update_auto()
	end
end


local function hidden(self, node)
	if node then
		gui.delete_node(node)
	end
end


local function hide(args)
	local name = args.name
	local to = args.to
	local transition = args.transition
	local duration = args.duration
	local delay = args.delay or 0
	local easing_id = string.upper(args.easing or "INOUTSINE")
	local easing = gui["EASING_"..easing_id] or gui.EASING_INOUTSINE
	
	local spr = sprites[name]
	transition = transition or save.get_var("show.transition")
	duration = duration or save.get_var("show.duration")
	local gui_scale = gui.get_scale(gui.get_node("gui")).x
	local n_auto = save.get_var(name..".n_auto")
	
	if spr then
		local node = spr.node
		if transition then
			local done = hidden
			local x = gui.get_position(node).x
			local y = gui.get_position(node).y
			if transition == "instant" then 
				done(_, node)
			elseif transition == "fade" then
				duration = duration or 0.4
				gui.animate(node, "color.w", 0, easing, duration, delay, done)
			elseif transition == "move_down" then
				duration = duration or 0.8
				--local to_position = to or v3(x, y - display_height / gui_scale, 0)
				local to_position = v3(x, y - display_height / gui_scale, 0)
				gui.animate(node, "position", to_position, easing, duration, delay, done)
			elseif transition == "shrink" then
				duration = duration or 0.6
				gui.animate(node, "scale", v3(0.0001, 0.0001, 1), easing, duration, delay, done)
			end
		end
		if to then 
			local pos_to = get_position_from_variable(to) or v3()
			local character_pos = get_character_delta_position(name)
			local pos = get_screen_position(character_pos + pos_to)
			local done = hidden
			if pos then
				duration = duration or 0.5
				gui.animate(node, "position", pos, easing, duration, delay, done)
			end
		end
		if n_auto then
			remove_auto(name)
			update_auto()
		end
		if not transition and not to then
			hidden(_, node)
		end
	end
	
	sprites[name] = nil
	save.state.sprites[name] = nil
	save.set_var(name..".at", nil)
	save.set_var(name..".n_auto", nil)
	save.set_var(name..".expression", nil)
end

local function hide_all(to, transition, duration)
	local all = {}
	for name, _ in pairs(sprites) do
		table.insert(all, name)
	end
	for _, name in pairs(all) do
		local args = {
			name = name,
			to = to,
			transition = transition,
			duration = duration,
		}
		hide(args)
	end
end

local function set_stencil_height(name, height)
	local stencil = stencils[name]
	if stencil then
		local gui_scale = gui.get_scale(gui.get_node("gui")).y
		local from = gui.get_size(stencil).y
		local to = height*display_height/gui_scale
		local duration = (math.abs(to - from) + 1) / 200
		gui.animate(stencil, "size.y", to, gui.EASING_OUTSINE, duration)
	end
end

local function unload_all()
	for k, v in pairs(sprites) do
		if does_node_exist(v.node) then
			gui.delete_node(v.node)
		end
	end
	sprites = {}
	auto_order = {}
end

local function load_sprites()
	unload_all()

	local sprites_auto = {}
	local sprites_not_auto = {}
	if save.state.sprites then
		for name, _ in pairs(save.state.sprites) do
			local n_auto = save.get_var(name..".n_auto")
			if n_auto then
				sprites_auto[n_auto] = name
			else
				table.insert(sprites_not_auto, name)
			end
		end
		for _, name in ipairs(sprites_auto) do
			local args = {name = name, duration = 0}
			show(args)
		end
		for _, name in ipairs(sprites_not_auto) do
			local args = {name = name, duration = 0}
			show(args)
		end
		update_auto(0)
	end
	reorder_z()
end

local function toggle_debug()
	debug_mode = not debug_mode
	gui.set_enabled(gui.get_node("debug"), debug_mode)
end

local function update_sound_source(id)
	if sprites[id] then
		local x = gui.get_position(sprites[id].node).x
		local width = 1920
		local pan_x = 2 * x / width
		matchanovel.post("sound", "set_audio_source", {id = id, pan_x = pan_x})
	end
end

local function update_sound_sources()
	for name, _ in pairs(moving) do
		update_sound_source(name)
	end
end




function init(self)
	msg.post("window_listener#window_listener", "add_listener")
end

function update(self, dt)
	update_sound_sources()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(message)
	elseif message_id == hash("hide") then
		if message.name == "all" then
			hide_all(message.to, message.transition, message.duration)
		else
			hide(message)
		end
	elseif message_id == hash("move") then
		move(message)
	elseif message_id == hash("set_sprite") then
		set_sprite(message.name, message.spr)
	elseif message_id == hash("flip") then 
		flip(message.name, message.duration)
	elseif message_id == hash("update_flip") then 
		update_flip(message.name)
	elseif message_id == hash("action_set_sprite") then 
		set_sprite(message.name, message.spr)
	elseif message_id == hash("action_set_stencil_height") then 
		set_stencil_height(message.name, message.value)
	elseif message_id == hash("move_to_front") then 
	elseif message_id == hash("move_to_back") then 
	elseif message_id == hash("set_render_order") then 
		gui.set_render_order(message.n)
	elseif message_id == hash("event_window_resized") then
		--local zoom = math.max(1, message.zoom_fit)
		--gui.set_scale(gui.get_node("center"), v3(zoom, zoom, 0))
	elseif message_id == hash("loaded") then
		load_sprites()
	elseif message_id == hash("unload") then 
		unload_all()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("debug") and action.pressed then
		toggle_debug()
	end

	if debug_mode then
		
	end
end

