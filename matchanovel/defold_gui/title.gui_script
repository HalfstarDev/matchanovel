local matchanovel = require "matchanovel.matchanovel"



local buttons = {"start"}

local active = true
local hovered_button = false


local button_alpha_hovered = 0.4
local button_alpha_unhovered = 0.2
local button_alpha_hover_duration = 0.3

local function hover_button(button)
	if not button then return end
	hovered_button = button
	local node = gui.get_node(buttons[button].."_button_box")
	gui.animate(node, "color.w", button_alpha_hovered, gui.EASING_INOUTSINE, button_alpha_hover_duration)
end

local function unhover_button()
	if not hovered_button then return end
	local node = gui.get_node(buttons[hovered_button].."_button_box")
	gui.animate(node, "color.w", button_alpha_unhovered, gui.EASING_INOUTSINE, button_alpha_hover_duration)
	hovered_button = false
end

local function started()
	gui.set_enabled(gui.get_node("title"), false)
end

local function start()
	if active then
		gui.animate(gui.get_node("title"), "color.w", 0, gui.EASING_INOUTSINE, 0.3, 0, started)
		active = false
		matchanovel.start()
	end
end




function init(self)
	msg.post("window_listener#window_listener", "add_listener")
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_render_order") then 
		gui.set_render_order(message.n)
	elseif message_id == hash("event_window_resized") then 
		local scale = vmath.vector3(message.zoom, message.zoom, 1)
		gui.set_scale(gui.get_node("center"), scale)
	end
end

function on_input(self, action_id, action)
	if not action_id then
		if hovered_button then 
			local name = buttons[hovered_button]
			if not gui.pick_node(gui.get_node(name.."_button_box"), action.x, action.y) then 
				unhover_button(hovered_button)
			end
		end
		if not hovered_button then 
			for button, name in pairs(buttons) do
				if gui.pick_node(gui.get_node(name.."_button_box"), action.x, action.y) then 
					hover_button(button)
				end
			end
		end
	elseif action_id == hash("touch") then 
		if action.released then
			if gui.pick_node(gui.get_node("start_button_box"), action.x, action.y) then
				start()
			end
		end
	end
	
	if active then 
		return true
	end
end
