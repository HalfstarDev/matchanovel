local matchanovel = require "matchanovel.matchanovel"
local settings = require "matchanovel.settings"
local save = require "matchanovel.save"
local typewriter = require "matchanovel.defold_gui.typewriter"
local colors = require "matchanovel.colors"
local theme = require "matchanovel.theme"


local HASH_TOUCH = hash("touch")
local HASH_MENU = hash("menu")
local HASH_BACK = hash("back")
local HASH_FORWARD = hash("forward")
local HASH_MIDDLE = hash("middle")
local HASH_CONTINUE = hash("continue")
local HASH_ENTER = hash("enter")
local HASH_SKIP = hash("skip")
local HASH_TOGGLE_SKIP = hash("toggle_skip")
local HASH_AUTO = hash("auto")

local display_width = tonumber(sys.get_config_int("display.width", 960))
local display_height = tonumber(sys.get_config_int("display.height", 520))

local alpha = 0.75
local textbox_color_y = 1/3
local textbox_gradient_y = 1/16
local text_width = 2/3
local text_height = 0.3
local skip_per_second = 30

local skipping = false
local skip_t = 0
local auto = false
local auto_t = 0
local log_position = false
local textbox_visible = false
local name_scale = 1
local window_resized_zoom = 1
local pressed_touch = false
local waiting_for_click = false
local showing_above_menu = false
local changed_sprites = {}


local function init_textbox()
	local node_color = gui.get_node("textbox_color")
	local scale = gui.get_scale(gui.get_node("gui"))
	local w = display_width / scale.x
	local h = display_height / scale.y
	
	local size_color = vmath.vector3(math.floor(w), math.floor(h * textbox_color_y), 0)
	gui.set_size(node_color, size_color)
	gui.set_alpha(node_color, alpha)

	local node_gradient = gui.get_node("textbox_gradient")
	if textbox_gradient_y then 
		gui.set_enabled(node_gradient, true)
		gui.set_size(node_gradient, vmath.vector3(math.floor(w), math.floor(h * textbox_gradient_y), 0))
		gui.set_position(node_gradient, vmath.vector3(0, size_color.y, 0))
		gui.set_alpha(node_gradient, alpha)
	else
		gui.set_enabled(node_gradient, false)
	end

	local node_text = gui.get_node("text")
	local width_border = (1 - text_width) / window_resized_zoom
	local size = vmath.vector3(0, 0, 1)
	size.x = w * (1 - width_border) 
	size.y = h * text_height
	local position = vmath.vector3(-size.x/2, size.y * window_resized_zoom, 0)
	gui.set_size(node_text, size)
	gui.set_position(node_text, position)
end

local function set_font(font, outline, tracking, leading)
	if font then
		gui.set_font(gui.get_node("text"), font)
		gui.set_font(gui.get_node("name"), font)
	end
	if outline then
		gui.set_outline(gui.get_node("text"), outline)
		gui.set_outline(gui.get_node("name"), outline)
	end
	if tracking then
		gui.set_tracking(gui.get_node("text"), tracking)
		gui.set_tracking(gui.get_node("name"), tracking)
	end
	if leading then
		gui.set_leading(gui.get_node("text"), leading)
		gui.set_leading(gui.get_node("name"), leading)
	end
	if tracking or leading then
		typewriter.set_options({tracking = tracking, leading = leading})
	end
	typewriter.redraw(true)
end

local function set_text_color(color)
	local v_color = colors.get_color(color)
	if v_color then
		typewriter.set_color(v_color)
	end
end

local function continue()
	save.set_global_read()
	typewriter.next()
end

local function hide_name()
	local node = gui.get_node("name")
	gui.set_enabled(node, false)
end

local function show_name(name)
	local node = gui.get_node("name")
	gui.set_enabled(node, true)
	gui.set_text(node, name)
end

local function get_text_color(name)
	if name then 
		local name_text_color, name_text_color_type = save.get_var(name..".text_color")
		if name_text_color then 
			if name_text_color_type == "color" then
				return name_text_color
			else
				local color = colors.string_to_color(name_text_color)
				if color then
					return color
				end
			end
		end
	end
	
	local textbox_text_color, textbox_text_color_type = save.get_var("textbox.text_color")
	if textbox_text_color then 
		if textbox_text_color_type == "color" then
			return textbox_text_color
		else
			local color = colors.string_to_color(textbox_text_color)
			if color then
				return color
			end
		end
	end
	
	local text_color, text_color_type = save.get_var("text.color")
	if text_color then
		if text_color_type == "color" then
			return text_color
		elseif text_color_type == "string" then
			local color = colors.string_to_color(text_color)
			if color then
				return color
			end
		end
	end
	
	return false
end

local function repeat_sfx(id, repeats, space, speed, channel, source)
	local message = {
		id = id,
		repeats = repeats,
		space = space,
		speed = speed,
		channel = channel,
		source = source,
	}
	matchanovel.post("sound", "repeat_sfx", message)
end

local function repeat_blip(var, var_id, source)
	local repeats = save.get_var(var_id.."_repeats") or 1
	local space = save.get_var(var_id.."_space") or 0.08
	local speed = save.get_var(var_id.."_speed") or 1
	repeat_sfx(var, repeats, space, speed, "blips", source)
end

local function play_blips(name)
	if skipping then return end
	if name and #name > 0 then
		local var_id
		local blip
		local speed
		local repeats
		local space
		name = string.lower(name)

		var_id = "sound.next_blip"
		local next_blip = save.get_var(var_id)
		if next_blip then
			repeats = save.get_var(var_id.."_repeats")
			space = save.get_var(var_id.."_space")
			speed = save.get_var(var_id.."_speed")
			save.set_var(var_id, nil, "nil")
			repeat_sfx(next_blip, repeats, space, speed, "blips", name)
			return
		end

		var_id = name..".textbox_blip"
		blip = save.get_var(var_id)
		repeats = save.get_var(var_id.."_repeats")
		space = save.get_var(var_id.."_space")
		speed = save.get_var(var_id.."_speed")

		var_id = "characters.textbox_blip"
		blip = blip or save.get_var(var_id)
		repeats = repeats or save.get_var(var_id.."_repeats")
		space = space or save.get_var(var_id.."_space")
		speed = speed or save.get_var(var_id.."_speed")

		repeats = repeats or 4
		space = space or 0.08
		speed = speed or 1

		if blip then
			repeat_sfx(blip, repeats, space, speed, "blips", name)
		end
	end
end

local function say(text, name)
	local color = get_text_color(name)
	if color then
		typewriter.set_color(color)
	end
	typewriter.start(text)
	play_blips(name)
	
	if name then
		name = save.get_var(name..".name") or tostring(name)
	else
		name = ""
	end
	if save.get_var(name..".incognito") then
		name = save.get_var("incognito_name") or "???"
	end
	show_name(name)
	matchanovel.add_to_log(text, name)
	save.set_var("say.current_text", text)
	save.set_var("say.current_name", name)
end

local function get_auto_duration()
	return 2 + 8*(1 - settings.get("auto_speed")/100)
end

local function end_skip()
	skipping = false
	msg.post("quickmenu#quickmenu", "deactivate_button", {name = "skip"})
	
	local node = gui.get_node("auto")
	gui.animate(node, "scale.y", 0, gui.EASING_INOUTSINE, 0.05)
end

local function end_auto()
	auto = false
	gui.set_fill_angle(gui.get_node("auto"), 0)
	msg.post("quickmenu#quickmenu", "deactivate_button", {name = "auto"})
end

local function start_skip()
	if auto then 
		end_auto()
	end
	skipping = true
	skip_t = 0
	msg.post("quickmenu#quickmenu", "activate_button", {name = "skip"})

	local node = gui.get_node("auto")
	gui.set_fill_angle(node, 360)
	gui.set_scale(node, vmath.vector3(1, 1, 1))
	gui.animate(node, "scale.y", 0.0001, gui.EASING_INOUTSINE, 0.35, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

local function start_auto()
	if skipping then 
		end_skip()
	end
	auto = true
	auto_t = 0
	local node = gui.get_node("auto")
	gui.set_fill_angle(node, 0)
	gui.animate(node, "scale.y", 1, gui.EASING_INOUTSINE, 0.1)
	msg.post("quickmenu#quickmenu", "activate_button", {name = "auto"})
end

local function toggle_skip()
	if skipping then
		end_skip()
	else
		start_skip()
	end
end

local function toggle_auto()
	if auto then
		end_auto()
	else
		start_auto()
	end
end

local function show()
	gui.set_enabled(gui.get_node("textbox"), true)
	matchanovel.post("quickmenu", "show")
	textbox_visible = true
end

local function hide()
	gui.set_enabled(gui.get_node("textbox"), false)
	matchanovel.post("quickmenu", "hide")
	textbox_visible = false
end

local function set_log(line)
	local text = matchanovel.get_log(line)
	typewriter.set_instant_text(text)
end

local function show_log()
	if not textbox_visible then
		gui.set_enabled(gui.get_node("textbox"), true)
	end
	msg.post("choices#choices", "hide")
end

local function hide_log()
	log_position = false
	if not textbox_visible then
		gui.set_enabled(gui.get_node("textbox"), false)
	end
	msg.post("choices#choices", "unhide")
	typewriter.hide_instant_text()
end

local function press_continue()
	--print("press_continue", log_position, waiting_for_click)
	if log_position then 
		hide_log()
	elseif waiting_for_click then
		waiting_for_click = false
		matchanovel.wait_done()
		--matchascript.next()
	elseif skipping then
		end_skip()
	elseif auto then
		end_auto()
	else
		continue()
	end
end

local function back()
	if log_position then
		log_position = log_position - 1
		if log_position < 1 then
			log_position = 1
			return
		end
	else
		log_position = matchanovel.get_log_size() - 1
		if not log_position or log_position < 1 then
			return
		else
			show_log()
		end 
	end
	set_log(log_position)
end

local function forward()
	if log_position then
		log_position = log_position + 1
		local n = matchanovel.get_log_size()
		if log_position >= n then
			log_position = n
			hide_log()
		else
			set_log(log_position)
		end
		--set_log(log_position)
	else
		press_continue()
	end
end


local function resize_window()
	--init_textbox()
	--gui.set_position(gui.get_node("text"), vmath.vector3(-622, 326 * window_resized_zoom, 0))
	--gui.set_position(gui.get_node("name"), vmath.vector3(-700, 446 * window_resized_zoom, 0))
	local text_zoom = 1 + (window_resized_zoom - 1) / 2
	gui.set_scale(gui.get_node("name"), vmath.vector3(text_zoom * name_scale, text_zoom * name_scale, 1))
	typewriter.set_scale(text_zoom)
	typewriter.redraw(true)
end

local function set_textbox_alpha(alpha)
	alpha = alpha or save.get_var("textbox.alpha") or 1
	gui.animate(gui.get_node("sprite"), "color.w", alpha, gui.EASING_INOUTSINE, 1)
end

local function wait_for_click()
	hide()
	waiting_for_click = true
end

local themed_images = {
	sprite = {
		default = "textbox",
		dark = "textbox_dark",
		light = "textbox_light",
		dyslexia = "textbox_dyslexia",
	},
}

local function change_sprite(node_id, image_id)
	if not changed_sprites[node_id] or changed_sprites[node_id] ~= image_id then
		local node = gui.get_node(node_id)
		local clone = gui.clone(node)
		local duration = 0.5
		gui.play_flipbook(node, image_id)
		gui.animate(clone, "color.w", 0, gui.EASING_LINEAR, duration, 0, function(self, node) gui.delete_node(node) end)
		changed_sprites[node_id] = image_id
	end
end

local function update_theme()
	for k, v in pairs(themed_images) do
		local animation = v[theme.get("type")]
		if animation then
			change_sprite(k, animation)
		end
	end

	local font_text = theme.get("font_text")
	local font_text_outline = theme.get("font_text_outline")
	local font_text_tracking = theme.get("font_text_tracking")
	local font_text_leading = theme.get("font_text_leading")
	if font_text then
		set_font(font_text, font_text_outline, font_text_tracking, font_text_leading)
	end
	
	local color_textbox_front = theme.get("color_textbox_front")
	if color_textbox_front then
		gui.set_color(gui.get_node("name"), color_textbox_front)
		typewriter.set_color(color_textbox_front)
	end
end



function init(self)
	msg.post("window_listener#window_listener", "add_listener")

	gui.set_text(gui.get_node("text"), "")
	name_scale = gui.get_scale(gui.get_node("name")).x
	--init_textbox()
	gui.set_alpha(gui.get_node("textbox"), 1)
	typewriter.init("text")

	gui.animate(gui.get_node("name"), "position.z", 0, gui.EASING_LINEAR, 0, 0, xyz)
	gui.set_text(gui.get_node("text"), "")
	gui.set_text(gui.get_node("name"), "")
	--matchanovel.init("/assets/scripts/script.txt")
	--matchanovel.start()
end

function update(self, dt)
	if skipping then
		skip_t = skip_t + dt
		if skip_t >= 1/skip_per_second then
			if settings.get("skip_all") or save.get_var("skip.all") or save.get_global_read(line) then
				continue()
				skip_t = 0
			else
				end_skip()
			end
		end
	elseif auto then
		local auto_duration = get_auto_duration()
		auto_t = auto_t + dt
		if auto_t >= auto_duration then
			gui.set_fill_angle(gui.get_node("auto"), 360)
			if typewriter.get_state() == "waiting" then
				if showing_above_menu then
					typewriter.redraw(false)
				else
					continue()
				end
				auto_t = 0
			end
		else
			local angle = 360 * auto_t / auto_duration
			angle = math.min(angle, 360)
			gui.set_fill_angle(gui.get_node("auto"), angle)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("say") then
		show()
		say(message.text, message.name)
		--gui.set_text(gui.get_node("text"), message.text)
	elseif message_id == hash("typewriter_next") then 
		matchanovel.textbox_done()
	elseif message_id == hash("set_font") then 
		set_font(message.font)
	elseif message_id == hash("event_window_resized") then 
		window_resized_zoom = message.zoom
		--resize_window()
	elseif message_id == hash("skip_button") then
		toggle_skip()
	elseif message_id == hash("end_skip") then
		end_skip()
	elseif message_id == hash("auto_button") then
		toggle_auto()
	elseif message_id == hash("set_textspeed") then
		--pprint(message)
		local textspeed
		if message.value > 0.999 then
			textspeed = 10000
		elseif message.value > 0.75 then
			textspeed = 100 + (message.value - 0.8) * 240
		else
			textspeed = 10 + message.value * 120
		end
		typewriter.set_options({textspeed = textspeed})
		if message.preview then
			typewriter.redraw(false)
			end_auto()
		end
	elseif message_id == hash("set_autospeed") then
		if message.preview then
			start_auto()
		end
	elseif message_id == hash("update_theme") then
		update_theme()
	elseif message_id == hash("hide") then
		hide()
	elseif message_id == hash("set_render_order") then 
		gui.set_render_order(message.n)
	elseif message_id == hash("unload") then
		gui.animate(gui.get_node("textbox"), "color.w", 0, gui.EASING_INOUTSINE, 0.5)
	elseif message_id == hash("start") then
		gui.animate(gui.get_node("textbox"), "color.w", 1, gui.EASING_INOUTSINE, 0.5)
	elseif message_id == hash("loaded") then
		hide_log()
		--typewriter.clear()
		gui.set_alpha(gui.get_node("textbox"), 1)
	elseif message_id == hash("action_set") then
		if message.name == "textbox.alpha" then
			set_textbox_alpha(message.value)
		elseif message.name == "text.color" then
			set_text_color(message.value)
		end
	elseif message_id == hash("show_above_menu") then
		if not showing_above_menu then
			gui.set_render_order(10)
			local node = gui.get_node("textbox")
			local position = gui.get_position(node) 
			position.x = 230
			gui.set_position(node, position)
			--gui.animate(, "position.x", 230, gui.EASING_LINEAR, 0.2)
			typewriter.start("This is a preview for the text box. Change the text speed to restart the animation.")
			gui.set_text(gui.get_node("name"), "Preview")
			gui.set_enabled(gui.get_node("textbox"), true)
			gui.animate(gui.get_node("textbox"), "color.w", 1, gui.EASING_INOUTSINE, 0.5)
			--gui.set_enabled(gui.get_node("textbox_color"), false)
			--gui.set_enabled(gui.get_node("textbox_gradient"), false)
			showing_above_menu = true
		end
	elseif message_id == hash("show_below_menu") then
		if showing_above_menu then
			gui.set_render_order(5)
			local duration = 0
			if textbox_visible then
				gui.animate(gui.get_node("textbox"), "position.x", 0, gui.EASING_LINEAR, duration)
			else
				local node = gui.get_node("textbox")
				local position = gui.get_position(node)
				position.x = 0
				gui.set_position(node, position)
				gui.set_enabled(gui.get_node("textbox"), false)
			end
			local current_text = save.get_var("say.current_text") or ""
			local current_name = save.get_var("say.current_name") or ""
			typewriter.start(current_text)
			show_name(current_name)
			end_auto()
			--gui.set_enabled(gui.get_node("textbox_color"), true)
			--gui.set_enabled(gui.get_node("textbox_gradient"), true)
			showing_above_menu = false
		end
	elseif message_id == hash("wait") then
		if message.for_click then
			wait_for_click()
		end
	end	
end

function on_input(self, action_id, action)
	if action_id == HASH_CONTINUE and action.pressed then 
		press_continue()
	elseif action_id == hash("a") and action.pressed then 
		press_continue()
	elseif action_id == HASH_ENTER and action.pressed then 
		press_continue()
	elseif action_id == HASH_TOUCH then
		if action.pressed then
			pressed_touch = true
			if showing_above_menu then
				if gui.pick_node(gui.get_node("sprite"), action.x, action.y) then
					typewriter.redraw(false)
				end
			end
		elseif pressed_touch and action.released then
			press_continue()
			pressed_touch = false
		end
	elseif action_id == HASH_SKIP then
		if action.pressed then
			start_skip()
		elseif action.released then
			end_skip()
		end
	elseif action_id == HASH_TOGGLE_SKIP and action.pressed then
		toggle_skip()
	elseif (action_id == hash("back") or action_id == hash("up")) and action.repeated then
		matchanovel.post("menu", "show_log")
		--back()
	elseif (action_id == hash("forward") or action_id == hash("down")) and action.repeated then
		forward()
	elseif action_id == HASH_AUTO and action.repeated then
		toggle_auto()
	end
end
