local save = require "matchanovel.save"
local images = require "matchanovel.images"

local display_width = tonumber(sys.get_config("display.width"))
local display_height = tonumber(sys.get_config("display.height"))

local sprites = {}
local loaded_textures = {}


local function get_key(val, tab)
	for k, v in pairs(tab) do
		if val == v then 
			return k
		end
	end
end

local function show(self, name, at)
	if not get_key(name, sprites) then 
		sprites[name] = gui.clone(gui.get_node("sprite"))
	end
	
	local node = sprites[name]
	local spr = save.get_var(name..".sprite")
	local spine_node = save.get_var(name..".spine")
	local scale = save.get_var(name..".scale")
	local x = save.get_var(name..".x") or 0.5
	local y = save.get_var(name..".y") or 0.5
	if at then 
		local at_id = save.get_var(name..".at")
		if at_id then
			x = save.get_var(at_id..".x")
			y = save.get_var(at_id..".y")
		end
	end
	x = (x - 0.5) * display_width * 2
	y = (y - 0.5) * display_height * 2
	local position = vmath.vector3(x, y, 0)

	if spr then
		--images.set_gui_sprite(loaded_textures, node, "./assets/images/sprites/"..spr)
		images.set_gui_sprite(loaded_textures, node, "/assets/images/sprites/"..spr)
		gui.set_scale(node, vmath.vector3(scale, scale, 1))
		gui.set_position(node, position)
		gui.animate(node, "color.w", 1, gui.EASING_INOUTSINE, 0.2)
	end
	if spine_node then
		local clone = gui.clone(gui.get_node(spine_node))
		gui.set_enabled(clone, true)
		gui.set_parent(clone, node, false)
		gui.animate(node, "color.w", 1, gui.EASING_INOUTSINE, 0.5)
		gui.move_below(node, gui.get_node("front"))
	end
	save.state.sprites[name] = true
end


local function hidden(self, node)
	gui.delete_node(node)
end


local function hide(name, to)
	local node = sprites[name]
	if node then
		gui.animate(node, "color.w", 0, gui.EASING_INOUTSINE, 0.2, 0, hidden)
	end
	sprites[name] = nil
	save.state.sprites[name] = nil
end

local function unload_all()
	for k, node in pairs(sprites) do
		gui.delete_node(node)
	end
	sprites = {}
end

local function move(name, to)
	local node = sprites[name]
	if node then 
		local position = vmath.vector3()
		gui.animate(node, "position", position, gui.EASING_INOUTSINE, 0.2)
	end
end

local function set_sprite(name, spr)
	local node = sprites[name]
	if node then 
		
	end
end


function init(self)
	msg.post("window_listener#window_listener", "add_listener")
	
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then 
		show(self, message.name, message.at)
	elseif message_id == hash("hide") then
		hide(message.name, message.to)
	elseif message_id == hash("move") then 
		move(message.name, message.to)
	elseif message_id == hash("set_sprite") then 
		set_sprite(message.name, message.spr)
	elseif message_id == hash("move_to_front") then 
	elseif message_id == hash("move_to_back") then 
	elseif message_id == hash("event_window_resized") then 
		gui.set_scale(gui.get_node("center"), vmath.vector3(message.zoom_fit, message.zoom_fit, 0))
	elseif message_id == hash("loaded") then 
		unload_all()
		if save.state.sprites then
			for name, _ in pairs(save.state.sprites) do
				show(self, name)
			end
		end
	end
end

