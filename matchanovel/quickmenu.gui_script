local matchanovel = require "matchanovel.matchanovel"
local settings = require "matchanovel.settings"

local display_width = tonumber(sys.get_config("display.width"))
local display_height = tonumber(sys.get_config("display.height"))
local HASH_TOUCH = hash("touch")
local HASH_MENU = hash("menu")

--local quickmenu_x = 1 --  0 = left, 1 = right, 0.5 = center
local quickmenu_button_border_x = 8
local quickmenu_button_distance = 16
local color_active = vmath.vector4(179/255, 102/255, 128/255, 1)
local color_inactive = vmath.vector4(153/255, 204/255, 204/255, 1)
local hidden = false


local buttons_text = {
	"Q.SAVE",
	"Q.LOAD",
	"SAVE",
	"LOAD",
	--"LOG",
	"AUTO",
	"SKIP",
	"SETTINGS",
	"LOCK",
}

local buttons = {
	"qsave",
	"qload",
	"save",
	"load",
	--"log",
	"auto",
	"skip",
	"settings",
	"lock",
}

local button_nodes = {}
local button_activated = {}
local button_hovered = false
local quickmenu_buttons_font = "serif"
local lock = true
local zoom = 1

local function get_key(value, table_name)
	for k, v in pairs(table_name) do
		if v == value then return k end
	end
end



local function show()
	hidden = false
	gui.animate(gui.get_node("quickmenu"), "position.y", 0, gui.EASING_INOUTSINE, 0.2)
end

local function hide()
	hidden = true
	gui.animate(gui.get_node("quickmenu"), "position.y", -64, gui.EASING_INOUTSINE, 0.2)
end

local function create_buttons()
	local prototype = gui.get_node("button")
	local x = quickmenu_button_distance
	local scale = gui.get_scale(gui.get_node("gui")).x
	for k, text in pairs(buttons_text) do
		local nodes = button_nodes[k]
		if not nodes then
			nodes = gui.clone_tree(prototype)
		end
		local node_button = nodes[hash("button")]
		local node_box = nodes[hash("button_box")]
		local node_shadow = nodes[hash("button_shadow")]
		local node_text = nodes[hash("button_text")]
		button_nodes[k] = nodes
		gui.set_enabled(node_button, true)

		gui.set_font(node_text, quickmenu_buttons_font)
		gui.set_text(node_text, text)

		local font_resource = gui.get_font_resource(gui.get_font(node_text))
		local metrics = resource.get_text_metrics(font_resource, text)
		local text_scale = gui.get_scale(node_text).x
		local width = metrics.width * text_scale + quickmenu_button_border_x
		gui.set_size(node_box, vmath.vector3(width, 96, 0))
		gui.set_size(node_shadow, vmath.vector3(width, 96, 0))

		x = x + width/2
		gui.set_position(node_button, vmath.vector3(x, 0, 0))
		x = x + width/2 + quickmenu_button_distance
	end

	zoom = math.min(2.5, zoom)
	local empty_area = display_width - x * scale * zoom
	local quickmenu_pos_x = -x / 2
	gui.set_position(gui.get_node("quickmenu"), vmath.vector3(quickmenu_pos_x, 0, 0))
	local quickmenu_zoom = 1 + (zoom - 1)*0.4
	gui.set_scale(gui.get_node("bottom"), vmath.vector3(quickmenu_zoom, quickmenu_zoom, 1))
	
	gui.set_enabled(prototype, false)
end

local function unhover_button()
	if button_hovered then
		local node = button_nodes[button_hovered][hash("button")]
		local node_shadow = button_nodes[button_hovered][hash("button_shadow")]
		local y = 0
		local duration = 0.15
		gui.animate(node, "position.y", y, gui.EASING_INOUTSINE, duration)
		if not button_activated[button_hovered] then
			gui.animate(node_shadow, "color", color_inactive, gui.EASING_INOUTSINE, duration)
		end
		button_hovered = false
	end
end

local function hover_button(button)
	unhover_button()
	local node = button_nodes[button][hash("button")]
	local node_shadow = button_nodes[button][hash("button_shadow")]
	local y = 16
	local duration = 0.15
	gui.animate(node, "position.y", y, gui.EASING_INOUTSINE, duration)
	gui.animate(node_shadow, "color", color_active, gui.EASING_INOUTSINE, duration)
	
	button_hovered = button
end

local function set_font(font)
	quickmenu_buttons_font = font 
	create_buttons()
end



local function activate_button(button)
	button_activated[button] = true
	local node_shadow = button_nodes[button][hash("button_shadow")]
	local duration = 0.15
	gui.animate(node_shadow, "color", color_active, gui.EASING_INOUTSINE, duration)
end

local function deactivate_button(button)
	button_activated[button] = false
	local node_shadow = button_nodes[button][hash("button_shadow")]
	local duration = 0.15
	gui.animate(node_shadow, "color", color_inactive, gui.EASING_INOUTSINE, duration)
end

local function lock_quickmenu()
	local key = get_key("lock", buttons)
	if key then 
		activate_button(key)
	end
end

local function unlock_quickmenu()
	local key = get_key("lock", buttons)
	if key then 
		deactivate_button(key)
	end
end

local function apply_lock()
	if lock then
		lock_quickmenu()
	else
		unlock_quickmenu()
	end
end

local function toggle_lock()
	lock = not lock
	settings.set("lock", lock)
	apply_lock()
end

local function load_lock()
	lock = settings.get("lock")
	if lock == nil then 
		lock = true
	end
	apply_lock()
end

local function press_button(i)
	local button = buttons[i]
	if button == "settings" then
		msg.post("menu#menu", "show_settings")
		matchanovel.showing_menu = true
	elseif button == "skip" then
		msg.post("textbox#textbox", "skip_button")
	elseif button == "auto" then
		msg.post("textbox#textbox", "auto_button")
	elseif button == "qsave" then
		matchanovel.quicksave()
	elseif button == "qload" then
		matchanovel.quickload()
	elseif button == "save" then
		msg.post("menu#menu", "show_save")
	elseif button == "load" then
		msg.post("menu#menu", "show_load")
	elseif button == "lock" then
		toggle_lock()
	end
	unhover_button()
end




function init(self)
	gui.set_render_order(10)
	msg.post("window_listener#window_listener", "add_listener")
	create_buttons()
	load_lock()
end

function update(self, dt)
	if matchanovel.showing_menu and button_hovered then 
		unhover_button()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_font") then 
		set_font(message.font)
	elseif message_id == hash("activate_button") then
		for k, name in pairs(buttons) do
			if name == message.name then 
				activate_button(k)
				return
			end
		end
	elseif message_id == hash("deactivate_button") then
		for k, name in pairs(buttons) do
			if name == message.name then 
				deactivate_button(k)
				return
			end
		end
	elseif message_id == hash("event_window_resized") then 
		zoom = message.zoom
		create_buttons()
	end	
end

function on_input(self, action_id, action)
	if not action_id then 
		if button_hovered then
			local node = button_nodes[button_hovered][hash("button")]
			if not gui.pick_node(node, action.x, action.y) then
				unhover_button()
			end
		end
		if not button_hovered then
			for k, v in pairs(button_nodes) do
				local node = v[hash("button")]
				if gui.pick_node(node, action.x, action.y) then
					hover_button(k)
					break
				end
			end
		end
		if hidden then
			if gui.pick_node(gui.get_node("hover_area"), action.x, action.y) then
				show()
			end
		elseif not lock then
			if not gui.pick_node(gui.get_node("hover_area"), action.x, action.y) then
				hide()
			end
		end
	elseif action_id == HASH_TOUCH then
		if action.pressed then 
		elseif action.released then
			for k, v in pairs(button_nodes) do
				local node = v[hash("button")]
				if gui.pick_node(node, action.x, action.y) then
					press_button(k)
					return true
				end
			end
		end
	elseif action_id == HASH_MENU then
	end
end
